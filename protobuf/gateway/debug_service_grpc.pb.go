// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protobuf/gateway/debug_service.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebugService_MockCoreTask_FullMethodName     = "/lubricant.gateway.debugService/mockCoreTask"
	DebugService_GatewayResources_FullMethodName = "/lubricant.gateway.debugService/GatewayResources"
)

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugServiceClient interface {
	MockCoreTask(ctx context.Context, in *MockCoreTaskRequest, opts ...grpc.CallOption) (*MockCoreTaskResponse, error)
	GatewayResources(ctx context.Context, in *GetGatewayResourcesApiRequest, opts ...grpc.CallOption) (*GetGatewayResourcesApiResponse, error)
}

type debugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugServiceClient(cc grpc.ClientConnInterface) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) MockCoreTask(ctx context.Context, in *MockCoreTaskRequest, opts ...grpc.CallOption) (*MockCoreTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MockCoreTaskResponse)
	err := c.cc.Invoke(ctx, DebugService_MockCoreTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) GatewayResources(ctx context.Context, in *GetGatewayResourcesApiRequest, opts ...grpc.CallOption) (*GetGatewayResourcesApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGatewayResourcesApiResponse)
	err := c.cc.Invoke(ctx, DebugService_GatewayResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
// All implementations must embed UnimplementedDebugServiceServer
// for forward compatibility.
type DebugServiceServer interface {
	MockCoreTask(context.Context, *MockCoreTaskRequest) (*MockCoreTaskResponse, error)
	GatewayResources(context.Context, *GetGatewayResourcesApiRequest) (*GetGatewayResourcesApiResponse, error)
	mustEmbedUnimplementedDebugServiceServer()
}

// UnimplementedDebugServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebugServiceServer struct{}

func (UnimplementedDebugServiceServer) MockCoreTask(context.Context, *MockCoreTaskRequest) (*MockCoreTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockCoreTask not implemented")
}
func (UnimplementedDebugServiceServer) GatewayResources(context.Context, *GetGatewayResourcesApiRequest) (*GetGatewayResourcesApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayResources not implemented")
}
func (UnimplementedDebugServiceServer) mustEmbedUnimplementedDebugServiceServer() {}
func (UnimplementedDebugServiceServer) testEmbeddedByValue()                      {}

// UnsafeDebugServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugServiceServer will
// result in compilation errors.
type UnsafeDebugServiceServer interface {
	mustEmbedUnimplementedDebugServiceServer()
}

func RegisterDebugServiceServer(s grpc.ServiceRegistrar, srv DebugServiceServer) {
	// If the following call pancis, it indicates UnimplementedDebugServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebugService_ServiceDesc, srv)
}

func _DebugService_MockCoreTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockCoreTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).MockCoreTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_MockCoreTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).MockCoreTask(ctx, req.(*MockCoreTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_GatewayResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayResourcesApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).GatewayResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_GatewayResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).GatewayResources(ctx, req.(*GetGatewayResourcesApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugService_ServiceDesc is the grpc.ServiceDesc for DebugService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lubricant.gateway.debugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "mockCoreTask",
			Handler:    _DebugService_MockCoreTask_Handler,
		},
		{
			MethodName: "GatewayResources",
			Handler:    _DebugService_GatewayResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/gateway/debug_service.proto",
}
