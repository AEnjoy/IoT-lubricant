syntax = "proto3";

import "protobuf/meta/meta.proto";

package lubricant;

option go_package = "protobuf/core";

service coreService {
  rpc ping(stream Ping) returns (stream Ping) {}
  rpc getTask(stream Task) returns (stream Task) {} // 服务端可能需要向客户端推送任务
  rpc pushMessageId(MessageIdInfo) returns (MessageIdInfo) {}
  rpc pushData(stream Data) returns (stream Data) {}
}

message Ping {
  int32 flag = 1; // 0:Ping 1:Pong 3: Error
}
message TaskDetail {
  string taskId = 1;
  string messageId = 2; // 如果服务端任务该消息需要处理,则会返回预响应的messageID;否则getTask req.messageId应该与返回的resp.messageId一致
  bytes content = 3; // json格式 []byte
}

message Task { // Resp
  string ID = 1; // 发起方的ID GatewayID or AgentID
  oneof task {
    GatewayTryGetTaskRequest gatewayTryGetTaskRequest = 2;
    GatewayGetTaskResponse gatewayGetTaskResponse = 3;
    CorePushDataRequest corePushDataRequest = 4;
    CorePushDataResponse corePushDataResponse = 5;
    NoTaskResponse noTaskResponse = 6;
    ErrorMessage errorMessage = 7;
  }
}
message NoTaskResponse {
  TaskDetail message = 1; // 仍然要判断 TaskDetail.messageId
}
message GatewayTryGetTaskRequest { // gateway -> core
  string gatewayID = 1;
  optional string taskId = 2;
}
message GatewayGetTaskResponse { // core -> gateway
    TaskDetail message = 1;
}
message CorePushDataRequest { // core -> gateway
  TaskDetail message = 1;
}
message CorePushDataResponse { // gateway -> core
  TaskDetail message = 1;
}
message MessageIdInfo {
  string messageId = 1; // 如果服务端任务该消息需要处理,则会返回预响应的messageID;pushMessageId req.messageId应该与返回的resp.messageId一致
  string gatewayId = 2;
  string time = 3;
  string emergency = 4; // 0: 不需要立即回应 1: 需要立即回应(将直接返回resp的消息ID)
  bytes content = 5; // json格式 []byte 响应内容resp
}

message Data {
  string messageId = 1; //如果messageId不符合uuid,则认为是返回错误信息
  string gatewayId = 2;
  string agentID = 3; // agentID用于标记数据所属
  repeated bytes data = 4;    // 二进制数据字段
  int32 dataLen = 5;
  string time = 6; // 起始时间
  int32 cycle = 7; // 数据周期 s
}
