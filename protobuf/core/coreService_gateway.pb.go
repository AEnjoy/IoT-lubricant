// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.21.12
// source: protobuf/core/coreService_gateway.proto

package core

import (
	meta "github.com/aenjoy/iot-lubricant/protobuf/meta"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	gateway "github.com/aenjoy/iot-lubricant/protobuf/gateway"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskDetail struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TaskId            string                 `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	MessageId         string                 `protobuf:"bytes,2,opt,name=messageId,proto3" json:"messageId,omitempty"`                        // 如果服务端任务该消息需要处理,则会返回预响应的messageID;否则getTask req.messageId应该与返回的resp.messageId一致
	Content           []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                            // json格式 []byte
	IsSynchronousTask *bool                  `protobuf:"varint,4,opt,name=isSynchronousTask,proto3,oneof" json:"isSynchronousTask,omitempty"` // 是否为同步任务
	// Types that are valid to be assigned to Task:
	//
	//	*TaskDetail_StartAgentRequest
	//	*TaskDetail_CreateAgentRequest
	//	*TaskDetail_EditAgentRequest
	//	*TaskDetail_RemoveAgentRequest
	//	*TaskDetail_StopAgentRequest
	//	*TaskDetail_UpdateAgentRequest
	//	*TaskDetail_GetAgentStatusRequest
	//	*TaskDetail_StartGatherRequest
	//	*TaskDetail_StopGatherRequest
	//	*TaskDetail_ReloadAgentControlRequest
	//	*TaskDetail_GetAgentOpenAPIDocRequest
	//	*TaskDetail_GetAgentInfoRequest
	Task          isTaskDetail_Task `protobuf_oneof:"task"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskDetail) Reset() {
	*x = TaskDetail{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetail) ProtoMessage() {}

func (x *TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetail.ProtoReflect.Descriptor instead.
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *TaskDetail) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskDetail) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *TaskDetail) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *TaskDetail) GetIsSynchronousTask() bool {
	if x != nil && x.IsSynchronousTask != nil {
		return *x.IsSynchronousTask
	}
	return false
}

func (x *TaskDetail) GetTask() isTaskDetail_Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskDetail) GetStartAgentRequest() *gateway.StartAgentRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_StartAgentRequest); ok {
			return x.StartAgentRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetCreateAgentRequest() *gateway.CreateAgentRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_CreateAgentRequest); ok {
			return x.CreateAgentRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetEditAgentRequest() *gateway.EditAgentRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_EditAgentRequest); ok {
			return x.EditAgentRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetRemoveAgentRequest() *gateway.RemoveAgentRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_RemoveAgentRequest); ok {
			return x.RemoveAgentRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetStopAgentRequest() *gateway.StopAgentRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_StopAgentRequest); ok {
			return x.StopAgentRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetUpdateAgentRequest() *gateway.UpdateAgentRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_UpdateAgentRequest); ok {
			return x.UpdateAgentRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetGetAgentStatusRequest() *gateway.GetAgentStatusRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_GetAgentStatusRequest); ok {
			return x.GetAgentStatusRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetStartGatherRequest() *gateway.StartGatherRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_StartGatherRequest); ok {
			return x.StartGatherRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetStopGatherRequest() *gateway.StopGatherRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_StopGatherRequest); ok {
			return x.StopGatherRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetReloadAgentControlRequest() *gateway.ReloadAgentControlRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_ReloadAgentControlRequest); ok {
			return x.ReloadAgentControlRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetGetAgentOpenAPIDocRequest() *gateway.GetAgentOpenAPIDocRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_GetAgentOpenAPIDocRequest); ok {
			return x.GetAgentOpenAPIDocRequest
		}
	}
	return nil
}

func (x *TaskDetail) GetGetAgentInfoRequest() *gateway.GetAgentInfoRequest {
	if x != nil {
		if x, ok := x.Task.(*TaskDetail_GetAgentInfoRequest); ok {
			return x.GetAgentInfoRequest
		}
	}
	return nil
}

type isTaskDetail_Task interface {
	isTaskDetail_Task()
}

type TaskDetail_StartAgentRequest struct {
	StartAgentRequest *gateway.StartAgentRequest `protobuf:"bytes,5,opt,name=startAgentRequest,proto3,oneof"`
}

type TaskDetail_CreateAgentRequest struct {
	CreateAgentRequest *gateway.CreateAgentRequest `protobuf:"bytes,6,opt,name=createAgentRequest,proto3,oneof"`
}

type TaskDetail_EditAgentRequest struct {
	EditAgentRequest *gateway.EditAgentRequest `protobuf:"bytes,7,opt,name=editAgentRequest,proto3,oneof"`
}

type TaskDetail_RemoveAgentRequest struct {
	RemoveAgentRequest *gateway.RemoveAgentRequest `protobuf:"bytes,8,opt,name=removeAgentRequest,proto3,oneof"`
}

type TaskDetail_StopAgentRequest struct {
	StopAgentRequest *gateway.StopAgentRequest `protobuf:"bytes,9,opt,name=stopAgentRequest,proto3,oneof"`
}

type TaskDetail_UpdateAgentRequest struct {
	UpdateAgentRequest *gateway.UpdateAgentRequest `protobuf:"bytes,10,opt,name=updateAgentRequest,proto3,oneof"`
}

type TaskDetail_GetAgentStatusRequest struct {
	GetAgentStatusRequest *gateway.GetAgentStatusRequest `protobuf:"bytes,11,opt,name=getAgentStatusRequest,proto3,oneof"`
}

type TaskDetail_StartGatherRequest struct {
	StartGatherRequest *gateway.StartGatherRequest `protobuf:"bytes,12,opt,name=startGatherRequest,proto3,oneof"`
}

type TaskDetail_StopGatherRequest struct {
	StopGatherRequest *gateway.StopGatherRequest `protobuf:"bytes,13,opt,name=stopGatherRequest,proto3,oneof"`
}

type TaskDetail_ReloadAgentControlRequest struct {
	ReloadAgentControlRequest *gateway.ReloadAgentControlRequest `protobuf:"bytes,14,opt,name=reloadAgentControlRequest,proto3,oneof"` //WIP
}

type TaskDetail_GetAgentOpenAPIDocRequest struct {
	GetAgentOpenAPIDocRequest *gateway.GetAgentOpenAPIDocRequest `protobuf:"bytes,15,opt,name=getAgentOpenAPIDocRequest,proto3,oneof"`
}

type TaskDetail_GetAgentInfoRequest struct {
	GetAgentInfoRequest *gateway.GetAgentInfoRequest `protobuf:"bytes,16,opt,name=getAgentInfoRequest,proto3,oneof"`
}

func (*TaskDetail_StartAgentRequest) isTaskDetail_Task() {}

func (*TaskDetail_CreateAgentRequest) isTaskDetail_Task() {}

func (*TaskDetail_EditAgentRequest) isTaskDetail_Task() {}

func (*TaskDetail_RemoveAgentRequest) isTaskDetail_Task() {}

func (*TaskDetail_StopAgentRequest) isTaskDetail_Task() {}

func (*TaskDetail_UpdateAgentRequest) isTaskDetail_Task() {}

func (*TaskDetail_GetAgentStatusRequest) isTaskDetail_Task() {}

func (*TaskDetail_StartGatherRequest) isTaskDetail_Task() {}

func (*TaskDetail_StopGatherRequest) isTaskDetail_Task() {}

func (*TaskDetail_ReloadAgentControlRequest) isTaskDetail_Task() {}

func (*TaskDetail_GetAgentOpenAPIDocRequest) isTaskDetail_Task() {}

func (*TaskDetail_GetAgentInfoRequest) isTaskDetail_Task() {}

type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	ID    string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"` // 发起方的ID GatewayID or AgentID
	// Types that are valid to be assigned to Task:
	//
	//	*Task_GatewayTryGetTaskRequest
	//	*Task_GatewayGetTaskResponse
	//	*Task_CorePushTaskRequest
	//	*Task_CorePushTaskResponse
	//	*Task_CoreQueryTaskResultRequest
	//	*Task_GatewayQueryTaskResultRequest
	//	*Task_CoreQueryTaskResultResponse
	//	*Task_GatewayQueryTaskResultResponse
	//	*Task_NoTaskResponse
	//	*Task_ErrorMessage
	Task          isTask_Task `protobuf_oneof:"task"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Task) GetTask() isTask_Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *Task) GetGatewayTryGetTaskRequest() *GatewayTryGetTaskRequest {
	if x != nil {
		if x, ok := x.Task.(*Task_GatewayTryGetTaskRequest); ok {
			return x.GatewayTryGetTaskRequest
		}
	}
	return nil
}

func (x *Task) GetGatewayGetTaskResponse() *GatewayGetTaskResponse {
	if x != nil {
		if x, ok := x.Task.(*Task_GatewayGetTaskResponse); ok {
			return x.GatewayGetTaskResponse
		}
	}
	return nil
}

func (x *Task) GetCorePushTaskRequest() *CorePushTaskRequest {
	if x != nil {
		if x, ok := x.Task.(*Task_CorePushTaskRequest); ok {
			return x.CorePushTaskRequest
		}
	}
	return nil
}

func (x *Task) GetCorePushTaskResponse() *CorePushTaskResponse {
	if x != nil {
		if x, ok := x.Task.(*Task_CorePushTaskResponse); ok {
			return x.CorePushTaskResponse
		}
	}
	return nil
}

func (x *Task) GetCoreQueryTaskResultRequest() *QueryTaskResultRequest {
	if x != nil {
		if x, ok := x.Task.(*Task_CoreQueryTaskResultRequest); ok {
			return x.CoreQueryTaskResultRequest
		}
	}
	return nil
}

func (x *Task) GetGatewayQueryTaskResultRequest() *QueryTaskResultRequest {
	if x != nil {
		if x, ok := x.Task.(*Task_GatewayQueryTaskResultRequest); ok {
			return x.GatewayQueryTaskResultRequest
		}
	}
	return nil
}

func (x *Task) GetCoreQueryTaskResultResponse() *QueryTaskResultResponse {
	if x != nil {
		if x, ok := x.Task.(*Task_CoreQueryTaskResultResponse); ok {
			return x.CoreQueryTaskResultResponse
		}
	}
	return nil
}

func (x *Task) GetGatewayQueryTaskResultResponse() *QueryTaskResultResponse {
	if x != nil {
		if x, ok := x.Task.(*Task_GatewayQueryTaskResultResponse); ok {
			return x.GatewayQueryTaskResultResponse
		}
	}
	return nil
}

func (x *Task) GetNoTaskResponse() *NoTaskResponse {
	if x != nil {
		if x, ok := x.Task.(*Task_NoTaskResponse); ok {
			return x.NoTaskResponse
		}
	}
	return nil
}

func (x *Task) GetErrorMessage() *meta.ErrorMessage {
	if x != nil {
		if x, ok := x.Task.(*Task_ErrorMessage); ok {
			return x.ErrorMessage
		}
	}
	return nil
}

type isTask_Task interface {
	isTask_Task()
}

type Task_GatewayTryGetTaskRequest struct {
	GatewayTryGetTaskRequest *GatewayTryGetTaskRequest `protobuf:"bytes,2,opt,name=gatewayTryGetTaskRequest,proto3,oneof"`
}

type Task_GatewayGetTaskResponse struct {
	GatewayGetTaskResponse *GatewayGetTaskResponse `protobuf:"bytes,3,opt,name=gatewayGetTaskResponse,proto3,oneof"`
}

type Task_CorePushTaskRequest struct {
	CorePushTaskRequest *CorePushTaskRequest `protobuf:"bytes,4,opt,name=corePushTaskRequest,proto3,oneof"`
}

type Task_CorePushTaskResponse struct {
	CorePushTaskResponse *CorePushTaskResponse `protobuf:"bytes,5,opt,name=corePushTaskResponse,proto3,oneof"`
}

type Task_CoreQueryTaskResultRequest struct {
	CoreQueryTaskResultRequest *QueryTaskResultRequest `protobuf:"bytes,6,opt,name=coreQueryTaskResultRequest,proto3,oneof"`
}

type Task_GatewayQueryTaskResultRequest struct {
	GatewayQueryTaskResultRequest *QueryTaskResultRequest `protobuf:"bytes,7,opt,name=gatewayQueryTaskResultRequest,proto3,oneof"`
}

type Task_CoreQueryTaskResultResponse struct {
	CoreQueryTaskResultResponse *QueryTaskResultResponse `protobuf:"bytes,8,opt,name=coreQueryTaskResultResponse,proto3,oneof"` // gateway send result -> core
}

type Task_GatewayQueryTaskResultResponse struct {
	GatewayQueryTaskResultResponse *QueryTaskResultResponse `protobuf:"bytes,9,opt,name=gatewayQueryTaskResultResponse,proto3,oneof"`
}

type Task_NoTaskResponse struct {
	NoTaskResponse *NoTaskResponse `protobuf:"bytes,10,opt,name=noTaskResponse,proto3,oneof"`
}

type Task_ErrorMessage struct {
	ErrorMessage *meta.ErrorMessage `protobuf:"bytes,11,opt,name=errorMessage,proto3,oneof"`
}

func (*Task_GatewayTryGetTaskRequest) isTask_Task() {}

func (*Task_GatewayGetTaskResponse) isTask_Task() {}

func (*Task_CorePushTaskRequest) isTask_Task() {}

func (*Task_CorePushTaskResponse) isTask_Task() {}

func (*Task_CoreQueryTaskResultRequest) isTask_Task() {}

func (*Task_GatewayQueryTaskResultRequest) isTask_Task() {}

func (*Task_CoreQueryTaskResultResponse) isTask_Task() {}

func (*Task_GatewayQueryTaskResultResponse) isTask_Task() {}

func (*Task_NoTaskResponse) isTask_Task() {}

func (*Task_ErrorMessage) isTask_Task() {}

type NoTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoTaskResponse) Reset() {
	*x = NoTaskResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoTaskResponse) ProtoMessage() {}

func (x *NoTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoTaskResponse.ProtoReflect.Descriptor instead.
func (*NoTaskResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{2}
}

type GatewayTryGetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GatewayID     string                 `protobuf:"bytes,1,opt,name=gatewayID,proto3" json:"gatewayID,omitempty"`
	TaskId        *string                `protobuf:"bytes,2,opt,name=taskId,proto3,oneof" json:"taskId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayTryGetTaskRequest) Reset() {
	*x = GatewayTryGetTaskRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayTryGetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayTryGetTaskRequest) ProtoMessage() {}

func (x *GatewayTryGetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayTryGetTaskRequest.ProtoReflect.Descriptor instead.
func (*GatewayTryGetTaskRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *GatewayTryGetTaskRequest) GetGatewayID() string {
	if x != nil {
		return x.GatewayID
	}
	return ""
}

func (x *GatewayTryGetTaskRequest) GetTaskId() string {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return ""
}

type GatewayGetTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Resp:
	//
	//	*GatewayGetTaskResponse_Message
	//	*GatewayGetTaskResponse_Empty
	Resp          isGatewayGetTaskResponse_Resp `protobuf_oneof:"resp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayGetTaskResponse) Reset() {
	*x = GatewayGetTaskResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayGetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayGetTaskResponse) ProtoMessage() {}

func (x *GatewayGetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayGetTaskResponse.ProtoReflect.Descriptor instead.
func (*GatewayGetTaskResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayGetTaskResponse) GetResp() isGatewayGetTaskResponse_Resp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GatewayGetTaskResponse) GetMessage() *TaskDetail {
	if x != nil {
		if x, ok := x.Resp.(*GatewayGetTaskResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *GatewayGetTaskResponse) GetEmpty() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Resp.(*GatewayGetTaskResponse_Empty); ok {
			return x.Empty
		}
	}
	return nil
}

type isGatewayGetTaskResponse_Resp interface {
	isGatewayGetTaskResponse_Resp()
}

type GatewayGetTaskResponse_Message struct {
	Message *TaskDetail `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type GatewayGetTaskResponse_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,2,opt,name=empty,proto3,oneof"`
}

func (*GatewayGetTaskResponse_Message) isGatewayGetTaskResponse_Resp() {}

func (*GatewayGetTaskResponse_Empty) isGatewayGetTaskResponse_Resp() {}

type CorePushTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *TaskDetail            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorePushTaskRequest) Reset() {
	*x = CorePushTaskRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorePushTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorePushTaskRequest) ProtoMessage() {}

func (x *CorePushTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorePushTaskRequest.ProtoReflect.Descriptor instead.
func (*CorePushTaskRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *CorePushTaskRequest) GetMessage() *TaskDetail {
	if x != nil {
		return x.Message
	}
	return nil
}

type CorePushTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorePushTaskResponse) Reset() {
	*x = CorePushTaskResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorePushTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorePushTaskResponse) ProtoMessage() {}

func (x *CorePushTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorePushTaskResponse.ProtoReflect.Descriptor instead.
func (*CorePushTaskResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *CorePushTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type QueryTaskResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTaskResultRequest) Reset() {
	*x = QueryTaskResultRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskResultRequest) ProtoMessage() {}

func (x *QueryTaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskResultRequest.ProtoReflect.Descriptor instead.
func (*QueryTaskResultRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *QueryTaskResultRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type QueryTaskResultResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	TaskId string                 `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Types that are valid to be assigned to Result:
	//
	//	*QueryTaskResultResponse_Finish
	//	*QueryTaskResultResponse_Failed
	//	*QueryTaskResultResponse_Working
	//	*QueryTaskResultResponse_Pending
	//	*QueryTaskResultResponse_NotFound
	Result        isQueryTaskResultResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTaskResultResponse) Reset() {
	*x = QueryTaskResultResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTaskResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTaskResultResponse) ProtoMessage() {}

func (x *QueryTaskResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTaskResultResponse.ProtoReflect.Descriptor instead.
func (*QueryTaskResultResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *QueryTaskResultResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *QueryTaskResultResponse) GetResult() isQueryTaskResultResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryTaskResultResponse) GetFinish() *anypb.Any {
	if x != nil {
		if x, ok := x.Result.(*QueryTaskResultResponse_Finish); ok {
			return x.Finish
		}
	}
	return nil
}

func (x *QueryTaskResultResponse) GetFailed() *status.Status {
	if x != nil {
		if x, ok := x.Result.(*QueryTaskResultResponse_Failed); ok {
			return x.Failed
		}
	}
	return nil
}

func (x *QueryTaskResultResponse) GetWorking() *status.Status {
	if x != nil {
		if x, ok := x.Result.(*QueryTaskResultResponse_Working); ok {
			return x.Working
		}
	}
	return nil
}

func (x *QueryTaskResultResponse) GetPending() *status.Status {
	if x != nil {
		if x, ok := x.Result.(*QueryTaskResultResponse_Pending); ok {
			return x.Pending
		}
	}
	return nil
}

func (x *QueryTaskResultResponse) GetNotFound() *status.Status {
	if x != nil {
		if x, ok := x.Result.(*QueryTaskResultResponse_NotFound); ok {
			return x.NotFound
		}
	}
	return nil
}

type isQueryTaskResultResponse_Result interface {
	isQueryTaskResultResponse_Result()
}

type QueryTaskResultResponse_Finish struct {
	Finish *anypb.Any `protobuf:"bytes,2,opt,name=finish,proto3,oneof"` // 任务完成
}

type QueryTaskResultResponse_Failed struct {
	Failed *status.Status `protobuf:"bytes,3,opt,name=failed,proto3,oneof"` // 任务失败 错误信息
}

type QueryTaskResultResponse_Working struct {
	Working *status.Status `protobuf:"bytes,4,opt,name=working,proto3,oneof"` // 任务进行中 进度信息
}

type QueryTaskResultResponse_Pending struct {
	Pending *status.Status `protobuf:"bytes,5,opt,name=pending,proto3,oneof"` // 任务阻塞中 阻塞原因
}

type QueryTaskResultResponse_NotFound struct {
	NotFound *status.Status `protobuf:"bytes,6,opt,name=notFound,proto3,oneof"`
}

func (*QueryTaskResultResponse_Finish) isQueryTaskResultResponse_Result() {}

func (*QueryTaskResultResponse_Failed) isQueryTaskResultResponse_Result() {}

func (*QueryTaskResultResponse_Working) isQueryTaskResultResponse_Result() {}

func (*QueryTaskResultResponse_Pending) isQueryTaskResultResponse_Result() {}

func (*QueryTaskResultResponse_NotFound) isQueryTaskResultResponse_Result() {}

type TaskResultRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Msg           *QueryTaskResultResponse `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResultRequest) Reset() {
	*x = TaskResultRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultRequest) ProtoMessage() {}

func (x *TaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultRequest.ProtoReflect.Descriptor instead.
func (*TaskResultRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *TaskResultRequest) GetMsg() *QueryTaskResultResponse {
	if x != nil {
		return x.Msg
	}
	return nil
}

type MessageIdInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"` // 如果服务端任务该消息需要处理,则会返回预响应的messageID;pushMessageId req.messageId应该与返回的resp.messageId一致
	GatewayId     string                 `protobuf:"bytes,2,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	Time          string                 `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Emergency     string                 `protobuf:"bytes,4,opt,name=emergency,proto3" json:"emergency,omitempty"` // 0: 不需要立即回应 1: 需要立即回应(将直接返回resp的消息ID)
	Content       []byte                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`     // json格式 []byte 响应内容resp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageIdInfo) Reset() {
	*x = MessageIdInfo{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageIdInfo) ProtoMessage() {}

func (x *MessageIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageIdInfo.ProtoReflect.Descriptor instead.
func (*MessageIdInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *MessageIdInfo) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageIdInfo) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *MessageIdInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *MessageIdInfo) GetEmergency() string {
	if x != nil {
		return x.Emergency
	}
	return ""
}

func (x *MessageIdInfo) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"` //如果messageId不符合uuid,则认为是返回错误信息
	GatewayId     string                 `protobuf:"bytes,2,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	AgentID       string                 `protobuf:"bytes,3,opt,name=agentID,proto3" json:"agentID,omitempty"` // agentID用于标记数据所属
	Data          [][]byte               `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`       // 二进制数据字段
	DataLen       int32                  `protobuf:"varint,5,opt,name=dataLen,proto3" json:"dataLen,omitempty"`
	Time          string                 `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`    // 起始时间
	Cycle         int32                  `protobuf:"varint,7,opt,name=cycle,proto3" json:"cycle,omitempty"` // 数据周期 s
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *Data) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Data) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *Data) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *Data) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Data) GetDataLen() int32 {
	if x != nil {
		return x.DataLen
	}
	return 0
}

func (x *Data) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Data) GetCycle() int32 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

type PushDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resp          *status.Status         `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushDataResponse) Reset() {
	*x = PushDataResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushDataResponse) ProtoMessage() {}

func (x *PushDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushDataResponse.ProtoReflect.Descriptor instead.
func (*PushDataResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *PushDataResponse) GetResp() *status.Status {
	if x != nil {
		return x.Resp
	}
	return nil
}

type GetCoreCapacityRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	PreAllocatedResourcesSize int32                  `protobuf:"varint,1,opt,name=preAllocatedResourcesSize,proto3" json:"preAllocatedResourcesSize,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetCoreCapacityRequest) Reset() {
	*x = GetCoreCapacityRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoreCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoreCapacityRequest) ProtoMessage() {}

func (x *GetCoreCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoreCapacityRequest.ProtoReflect.Descriptor instead.
func (*GetCoreCapacityRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *GetCoreCapacityRequest) GetPreAllocatedResourcesSize() int32 {
	if x != nil {
		return x.PreAllocatedResourcesSize
	}
	return 0
}

type GetCoreCapacityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resp          *status.Status         `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoreCapacityResponse) Reset() {
	*x = GetCoreCapacityResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoreCapacityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoreCapacityResponse) ProtoMessage() {}

func (x *GetCoreCapacityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoreCapacityResponse.ProtoReflect.Descriptor instead.
func (*GetCoreCapacityResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *GetCoreCapacityResponse) GetResp() *status.Status {
	if x != nil {
		return x.Resp
	}
	return nil
}

type ReportErrorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorMessage  *meta.ErrorMessage     `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportErrorRequest) Reset() {
	*x = ReportErrorRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportErrorRequest) ProtoMessage() {}

func (x *ReportErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportErrorRequest.ProtoReflect.Descriptor instead.
func (*ReportErrorRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *ReportErrorRequest) GetErrorMessage() *meta.ErrorMessage {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

type ReportErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resp          *status.Status         `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportErrorResponse) Reset() {
	*x = ReportErrorResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportErrorResponse) ProtoMessage() {}

func (x *ReportErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportErrorResponse.ProtoReflect.Descriptor instead.
func (*ReportErrorResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *ReportErrorResponse) GetResp() *status.Status {
	if x != nil {
		return x.Resp
	}
	return nil
}

type ReportRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	GatewayId string                 `protobuf:"bytes,1,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	AgentId   string                 `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	// Types that are valid to be assigned to Req:
	//
	//	*ReportRequest_Error
	//	*ReportRequest_AgentStatus
	//	*ReportRequest_TaskResult
	Req           isReportRequest_Req `protobuf_oneof:"req"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *ReportRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *ReportRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ReportRequest) GetReq() isReportRequest_Req {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ReportRequest) GetError() *ReportErrorRequest {
	if x != nil {
		if x, ok := x.Req.(*ReportRequest_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *ReportRequest) GetAgentStatus() *AgentStatusRequest {
	if x != nil {
		if x, ok := x.Req.(*ReportRequest_AgentStatus); ok {
			return x.AgentStatus
		}
	}
	return nil
}

func (x *ReportRequest) GetTaskResult() *TaskResultRequest {
	if x != nil {
		if x, ok := x.Req.(*ReportRequest_TaskResult); ok {
			return x.TaskResult
		}
	}
	return nil
}

type isReportRequest_Req interface {
	isReportRequest_Req()
}

type ReportRequest_Error struct {
	Error *ReportErrorRequest `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type ReportRequest_AgentStatus struct {
	AgentStatus *AgentStatusRequest `protobuf:"bytes,4,opt,name=agentStatus,proto3,oneof"`
}

type ReportRequest_TaskResult struct {
	TaskResult *TaskResultRequest `protobuf:"bytes,5,opt,name=taskResult,proto3,oneof"`
}

func (*ReportRequest_Error) isReportRequest_Req() {}

func (*ReportRequest_AgentStatus) isReportRequest_Req() {}

func (*ReportRequest_TaskResult) isReportRequest_Req() {}

type ReportResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	GatewayId string                 `protobuf:"bytes,1,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	AgentId   string                 `protobuf:"bytes,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	// Types that are valid to be assigned to Resp:
	//
	//	*ReportResponse_Error
	//	*ReportResponse_AgentStatus
	//	*ReportResponse_TaskResult
	Resp          isReportResponse_Resp `protobuf_oneof:"resp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *ReportResponse) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *ReportResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ReportResponse) GetResp() isReportResponse_Resp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ReportResponse) GetError() *ReportErrorResponse {
	if x != nil {
		if x, ok := x.Resp.(*ReportResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *ReportResponse) GetAgentStatus() *AgentStatusResponse {
	if x != nil {
		if x, ok := x.Resp.(*ReportResponse_AgentStatus); ok {
			return x.AgentStatus
		}
	}
	return nil
}

func (x *ReportResponse) GetTaskResult() *TaskResultResponse {
	if x != nil {
		if x, ok := x.Resp.(*ReportResponse_TaskResult); ok {
			return x.TaskResult
		}
	}
	return nil
}

type isReportResponse_Resp interface {
	isReportResponse_Resp()
}

type ReportResponse_Error struct {
	Error *ReportErrorResponse `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type ReportResponse_AgentStatus struct {
	AgentStatus *AgentStatusResponse `protobuf:"bytes,4,opt,name=agentStatus,proto3,oneof"`
}

type ReportResponse_TaskResult struct {
	TaskResult *TaskResultResponse `protobuf:"bytes,5,opt,name=taskResult,proto3,oneof"`
}

func (*ReportResponse_Error) isReportResponse_Resp() {}

func (*ReportResponse_AgentStatus) isReportResponse_Resp() {}

func (*ReportResponse_TaskResult) isReportResponse_Resp() {}

type AgentStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Req           *status.Status         `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentStatusRequest) Reset() {
	*x = AgentStatusRequest{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatusRequest) ProtoMessage() {}

func (x *AgentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatusRequest.ProtoReflect.Descriptor instead.
func (*AgentStatusRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{19}
}

func (x *AgentStatusRequest) GetReq() *status.Status {
	if x != nil {
		return x.Req
	}
	return nil
}

type AgentStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resp          *status.Status         `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentStatusResponse) Reset() {
	*x = AgentStatusResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatusResponse) ProtoMessage() {}

func (x *AgentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatusResponse.ProtoReflect.Descriptor instead.
func (*AgentStatusResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{20}
}

func (x *AgentStatusResponse) GetResp() *status.Status {
	if x != nil {
		return x.Resp
	}
	return nil
}

type TaskResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resp          *status.Status         `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResultResponse) Reset() {
	*x = TaskResultResponse{}
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultResponse) ProtoMessage() {}

func (x *TaskResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_core_coreService_gateway_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultResponse.ProtoReflect.Descriptor instead.
func (*TaskResultResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_core_coreService_gateway_proto_rawDescGZIP(), []int{21}
}

func (x *TaskResultResponse) GetResp() *status.Status {
	if x != nil {
		return x.Resp
	}
	return nil
}

var File_protobuf_core_coreService_gateway_proto protoreflect.FileDescriptor

var file_protobuf_core_coreService_gateway_proto_rawDesc = string([]byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x75, 0x62, 0x72, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x09, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x11, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x11, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x62,
	0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x64, 0x69, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x60, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74,
	0x6f, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x70, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6c, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x19, 0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50,
	0x49, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x50, 0x49, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x50, 0x49, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xe0, 0x07, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x66, 0x0a, 0x18, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x72, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x16, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63,
	0x6f, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f,
	0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x1d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x6f, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x6f, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x18, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x72, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x16, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x6f, 0x72, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x08, 0x6e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xb4, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x22, 0x56, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x70, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x70, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x51, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22,
	0x97, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x62,
	0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x03, 0x72, 0x65, 0x71, 0x22, 0x3d, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72,
	0x65, 0x73, 0x70, 0x22, 0x3c, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x32, 0x86, 0x04, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x6c, 0x75, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x6c, 0x75, 0x62,
	0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x3b, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x6c,
	0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x14, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4f,
	0x0a, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d,
	0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x14, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63,
	0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x2e, 0x6c,
	0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x62, 0x72, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_protobuf_core_coreService_gateway_proto_rawDescOnce sync.Once
	file_protobuf_core_coreService_gateway_proto_rawDescData []byte
)

func file_protobuf_core_coreService_gateway_proto_rawDescGZIP() []byte {
	file_protobuf_core_coreService_gateway_proto_rawDescOnce.Do(func() {
		file_protobuf_core_coreService_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protobuf_core_coreService_gateway_proto_rawDesc), len(file_protobuf_core_coreService_gateway_proto_rawDesc)))
	})
	return file_protobuf_core_coreService_gateway_proto_rawDescData
}

var file_protobuf_core_coreService_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_protobuf_core_coreService_gateway_proto_goTypes = []any{
	(*TaskDetail)(nil),                        // 0: lubricant.core.TaskDetail
	(*Task)(nil),                              // 1: lubricant.core.Task
	(*NoTaskResponse)(nil),                    // 2: lubricant.core.NoTaskResponse
	(*GatewayTryGetTaskRequest)(nil),          // 3: lubricant.core.GatewayTryGetTaskRequest
	(*GatewayGetTaskResponse)(nil),            // 4: lubricant.core.GatewayGetTaskResponse
	(*CorePushTaskRequest)(nil),               // 5: lubricant.core.CorePushTaskRequest
	(*CorePushTaskResponse)(nil),              // 6: lubricant.core.CorePushTaskResponse
	(*QueryTaskResultRequest)(nil),            // 7: lubricant.core.QueryTaskResultRequest
	(*QueryTaskResultResponse)(nil),           // 8: lubricant.core.QueryTaskResultResponse
	(*TaskResultRequest)(nil),                 // 9: lubricant.core.TaskResultRequest
	(*MessageIdInfo)(nil),                     // 10: lubricant.core.MessageIdInfo
	(*Data)(nil),                              // 11: lubricant.core.Data
	(*PushDataResponse)(nil),                  // 12: lubricant.core.pushDataResponse
	(*GetCoreCapacityRequest)(nil),            // 13: lubricant.core.getCoreCapacityRequest
	(*GetCoreCapacityResponse)(nil),           // 14: lubricant.core.getCoreCapacityResponse
	(*ReportErrorRequest)(nil),                // 15: lubricant.core.reportErrorRequest
	(*ReportErrorResponse)(nil),               // 16: lubricant.core.reportErrorResponse
	(*ReportRequest)(nil),                     // 17: lubricant.core.ReportRequest
	(*ReportResponse)(nil),                    // 18: lubricant.core.ReportResponse
	(*AgentStatusRequest)(nil),                // 19: lubricant.core.AgentStatusRequest
	(*AgentStatusResponse)(nil),               // 20: lubricant.core.AgentStatusResponse
	(*TaskResultResponse)(nil),                // 21: lubricant.core.TaskResultResponse
	(*gateway.StartAgentRequest)(nil),         // 22: lubricant.gateway.StartAgentRequest
	(*gateway.CreateAgentRequest)(nil),        // 23: lubricant.gateway.CreateAgentRequest
	(*gateway.EditAgentRequest)(nil),          // 24: lubricant.gateway.EditAgentRequest
	(*gateway.RemoveAgentRequest)(nil),        // 25: lubricant.gateway.RemoveAgentRequest
	(*gateway.StopAgentRequest)(nil),          // 26: lubricant.gateway.StopAgentRequest
	(*gateway.UpdateAgentRequest)(nil),        // 27: lubricant.gateway.UpdateAgentRequest
	(*gateway.GetAgentStatusRequest)(nil),     // 28: lubricant.gateway.GetAgentStatusRequest
	(*gateway.StartGatherRequest)(nil),        // 29: lubricant.gateway.StartGatherRequest
	(*gateway.StopGatherRequest)(nil),         // 30: lubricant.gateway.StopGatherRequest
	(*gateway.ReloadAgentControlRequest)(nil), // 31: lubricant.gateway.ReloadAgentControlRequest
	(*gateway.GetAgentOpenAPIDocRequest)(nil), // 32: lubricant.gateway.GetAgentOpenAPIDocRequest
	(*gateway.GetAgentInfoRequest)(nil),       // 33: lubricant.gateway.GetAgentInfoRequest
	(*meta.ErrorMessage)(nil),                 // 34: lubricant.ErrorMessage
	(*emptypb.Empty)(nil),                     // 35: google.protobuf.Empty
	(*anypb.Any)(nil),                         // 36: google.protobuf.Any
	(*status.Status)(nil),                     // 37: google.rpc.Status
	(*meta.Ping)(nil),                         // 38: lubricant.Ping
}
var file_protobuf_core_coreService_gateway_proto_depIdxs = []int32{
	22, // 0: lubricant.core.TaskDetail.startAgentRequest:type_name -> lubricant.gateway.StartAgentRequest
	23, // 1: lubricant.core.TaskDetail.createAgentRequest:type_name -> lubricant.gateway.CreateAgentRequest
	24, // 2: lubricant.core.TaskDetail.editAgentRequest:type_name -> lubricant.gateway.EditAgentRequest
	25, // 3: lubricant.core.TaskDetail.removeAgentRequest:type_name -> lubricant.gateway.RemoveAgentRequest
	26, // 4: lubricant.core.TaskDetail.stopAgentRequest:type_name -> lubricant.gateway.StopAgentRequest
	27, // 5: lubricant.core.TaskDetail.updateAgentRequest:type_name -> lubricant.gateway.UpdateAgentRequest
	28, // 6: lubricant.core.TaskDetail.getAgentStatusRequest:type_name -> lubricant.gateway.GetAgentStatusRequest
	29, // 7: lubricant.core.TaskDetail.startGatherRequest:type_name -> lubricant.gateway.StartGatherRequest
	30, // 8: lubricant.core.TaskDetail.stopGatherRequest:type_name -> lubricant.gateway.StopGatherRequest
	31, // 9: lubricant.core.TaskDetail.reloadAgentControlRequest:type_name -> lubricant.gateway.ReloadAgentControlRequest
	32, // 10: lubricant.core.TaskDetail.getAgentOpenAPIDocRequest:type_name -> lubricant.gateway.GetAgentOpenAPIDocRequest
	33, // 11: lubricant.core.TaskDetail.getAgentInfoRequest:type_name -> lubricant.gateway.GetAgentInfoRequest
	3,  // 12: lubricant.core.Task.gatewayTryGetTaskRequest:type_name -> lubricant.core.GatewayTryGetTaskRequest
	4,  // 13: lubricant.core.Task.gatewayGetTaskResponse:type_name -> lubricant.core.GatewayGetTaskResponse
	5,  // 14: lubricant.core.Task.corePushTaskRequest:type_name -> lubricant.core.CorePushTaskRequest
	6,  // 15: lubricant.core.Task.corePushTaskResponse:type_name -> lubricant.core.CorePushTaskResponse
	7,  // 16: lubricant.core.Task.coreQueryTaskResultRequest:type_name -> lubricant.core.QueryTaskResultRequest
	7,  // 17: lubricant.core.Task.gatewayQueryTaskResultRequest:type_name -> lubricant.core.QueryTaskResultRequest
	8,  // 18: lubricant.core.Task.coreQueryTaskResultResponse:type_name -> lubricant.core.QueryTaskResultResponse
	8,  // 19: lubricant.core.Task.gatewayQueryTaskResultResponse:type_name -> lubricant.core.QueryTaskResultResponse
	2,  // 20: lubricant.core.Task.noTaskResponse:type_name -> lubricant.core.NoTaskResponse
	34, // 21: lubricant.core.Task.errorMessage:type_name -> lubricant.ErrorMessage
	0,  // 22: lubricant.core.GatewayGetTaskResponse.message:type_name -> lubricant.core.TaskDetail
	35, // 23: lubricant.core.GatewayGetTaskResponse.empty:type_name -> google.protobuf.Empty
	0,  // 24: lubricant.core.CorePushTaskRequest.message:type_name -> lubricant.core.TaskDetail
	36, // 25: lubricant.core.QueryTaskResultResponse.finish:type_name -> google.protobuf.Any
	37, // 26: lubricant.core.QueryTaskResultResponse.failed:type_name -> google.rpc.Status
	37, // 27: lubricant.core.QueryTaskResultResponse.working:type_name -> google.rpc.Status
	37, // 28: lubricant.core.QueryTaskResultResponse.pending:type_name -> google.rpc.Status
	37, // 29: lubricant.core.QueryTaskResultResponse.notFound:type_name -> google.rpc.Status
	8,  // 30: lubricant.core.TaskResultRequest.msg:type_name -> lubricant.core.QueryTaskResultResponse
	37, // 31: lubricant.core.pushDataResponse.resp:type_name -> google.rpc.Status
	37, // 32: lubricant.core.getCoreCapacityResponse.resp:type_name -> google.rpc.Status
	34, // 33: lubricant.core.reportErrorRequest.errorMessage:type_name -> lubricant.ErrorMessage
	37, // 34: lubricant.core.reportErrorResponse.resp:type_name -> google.rpc.Status
	15, // 35: lubricant.core.ReportRequest.error:type_name -> lubricant.core.reportErrorRequest
	19, // 36: lubricant.core.ReportRequest.agentStatus:type_name -> lubricant.core.AgentStatusRequest
	9,  // 37: lubricant.core.ReportRequest.taskResult:type_name -> lubricant.core.TaskResultRequest
	16, // 38: lubricant.core.ReportResponse.error:type_name -> lubricant.core.reportErrorResponse
	20, // 39: lubricant.core.ReportResponse.agentStatus:type_name -> lubricant.core.AgentStatusResponse
	21, // 40: lubricant.core.ReportResponse.taskResult:type_name -> lubricant.core.TaskResultResponse
	37, // 41: lubricant.core.AgentStatusRequest.req:type_name -> google.rpc.Status
	37, // 42: lubricant.core.AgentStatusResponse.resp:type_name -> google.rpc.Status
	37, // 43: lubricant.core.TaskResultResponse.resp:type_name -> google.rpc.Status
	38, // 44: lubricant.core.coreService.ping:input_type -> lubricant.Ping
	1,  // 45: lubricant.core.coreService.getTask:input_type -> lubricant.core.Task
	10, // 46: lubricant.core.coreService.pushMessageId:input_type -> lubricant.core.MessageIdInfo
	11, // 47: lubricant.core.coreService.pushDataStream:input_type -> lubricant.core.Data
	11, // 48: lubricant.core.coreService.pushData:input_type -> lubricant.core.Data
	13, // 49: lubricant.core.coreService.getCoreCapacity:input_type -> lubricant.core.getCoreCapacityRequest
	17, // 50: lubricant.core.coreService.report:input_type -> lubricant.core.ReportRequest
	38, // 51: lubricant.core.coreService.ping:output_type -> lubricant.Ping
	1,  // 52: lubricant.core.coreService.getTask:output_type -> lubricant.core.Task
	10, // 53: lubricant.core.coreService.pushMessageId:output_type -> lubricant.core.MessageIdInfo
	11, // 54: lubricant.core.coreService.pushDataStream:output_type -> lubricant.core.Data
	12, // 55: lubricant.core.coreService.pushData:output_type -> lubricant.core.pushDataResponse
	14, // 56: lubricant.core.coreService.getCoreCapacity:output_type -> lubricant.core.getCoreCapacityResponse
	18, // 57: lubricant.core.coreService.report:output_type -> lubricant.core.ReportResponse
	51, // [51:58] is the sub-list for method output_type
	44, // [44:51] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_protobuf_core_coreService_gateway_proto_init() }
func file_protobuf_core_coreService_gateway_proto_init() {
	if File_protobuf_core_coreService_gateway_proto != nil {
		return
	}
	file_protobuf_core_coreService_gateway_proto_msgTypes[0].OneofWrappers = []any{
		(*TaskDetail_StartAgentRequest)(nil),
		(*TaskDetail_CreateAgentRequest)(nil),
		(*TaskDetail_EditAgentRequest)(nil),
		(*TaskDetail_RemoveAgentRequest)(nil),
		(*TaskDetail_StopAgentRequest)(nil),
		(*TaskDetail_UpdateAgentRequest)(nil),
		(*TaskDetail_GetAgentStatusRequest)(nil),
		(*TaskDetail_StartGatherRequest)(nil),
		(*TaskDetail_StopGatherRequest)(nil),
		(*TaskDetail_ReloadAgentControlRequest)(nil),
		(*TaskDetail_GetAgentOpenAPIDocRequest)(nil),
		(*TaskDetail_GetAgentInfoRequest)(nil),
	}
	file_protobuf_core_coreService_gateway_proto_msgTypes[1].OneofWrappers = []any{
		(*Task_GatewayTryGetTaskRequest)(nil),
		(*Task_GatewayGetTaskResponse)(nil),
		(*Task_CorePushTaskRequest)(nil),
		(*Task_CorePushTaskResponse)(nil),
		(*Task_CoreQueryTaskResultRequest)(nil),
		(*Task_GatewayQueryTaskResultRequest)(nil),
		(*Task_CoreQueryTaskResultResponse)(nil),
		(*Task_GatewayQueryTaskResultResponse)(nil),
		(*Task_NoTaskResponse)(nil),
		(*Task_ErrorMessage)(nil),
	}
	file_protobuf_core_coreService_gateway_proto_msgTypes[3].OneofWrappers = []any{}
	file_protobuf_core_coreService_gateway_proto_msgTypes[4].OneofWrappers = []any{
		(*GatewayGetTaskResponse_Message)(nil),
		(*GatewayGetTaskResponse_Empty)(nil),
	}
	file_protobuf_core_coreService_gateway_proto_msgTypes[8].OneofWrappers = []any{
		(*QueryTaskResultResponse_Finish)(nil),
		(*QueryTaskResultResponse_Failed)(nil),
		(*QueryTaskResultResponse_Working)(nil),
		(*QueryTaskResultResponse_Pending)(nil),
		(*QueryTaskResultResponse_NotFound)(nil),
	}
	file_protobuf_core_coreService_gateway_proto_msgTypes[17].OneofWrappers = []any{
		(*ReportRequest_Error)(nil),
		(*ReportRequest_AgentStatus)(nil),
		(*ReportRequest_TaskResult)(nil),
	}
	file_protobuf_core_coreService_gateway_proto_msgTypes[18].OneofWrappers = []any{
		(*ReportResponse_Error)(nil),
		(*ReportResponse_AgentStatus)(nil),
		(*ReportResponse_TaskResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protobuf_core_coreService_gateway_proto_rawDesc), len(file_protobuf_core_coreService_gateway_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_core_coreService_gateway_proto_goTypes,
		DependencyIndexes: file_protobuf_core_coreService_gateway_proto_depIdxs,
		MessageInfos:      file_protobuf_core_coreService_gateway_proto_msgTypes,
	}.Build()
	File_protobuf_core_coreService_gateway_proto = out.File
	file_protobuf_core_coreService_gateway_proto_goTypes = nil
	file_protobuf_core_coreService_gateway_proto_depIdxs = nil
}
