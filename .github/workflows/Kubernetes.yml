name: Kubernetes CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - 'CHANGELOGS/**'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - 'CHANGELOGS/**'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
jobs:
  test-on-k8s:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (!github.event.pull_request.draft && !contains(github.event.pull_request.title, 'WIP'))
    steps:
      - uses: actions/checkout@v4

      - name: Cache Docker Images
        id: cache-docker
        uses: actions/cache@v4
        with:
          path: /tmp/docker-images
          key: ${{ runner.os }}-docker-images-${{ hashFiles('scripts/docker-load-to-kind.sh','scripts/docker-pulls.sh','scripts/docker-save.sh') }}-v1
          restore-keys: |
            ${{ runner.os }}-docker-images-

      - name: Pull and Save Docker Images
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          bash scripts/docker-pulls.sh
          bash scripts/docker-save.sh

      - name: Load Docker Images
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: |
          if [ -f /tmp/docker-images/base-images.tar ]; then
            echo "Cache(Hit): Loading Docker Images..."
            docker load -i /tmp/docker-images/base-images.tar
          fi

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Install Kind, Helm and download Go Dependency
        run: |
          set -e
          (
          echo "Installing Kind..."
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.27.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/bin/kind
          sudo mkdir -p /etc/casdoor
          kind create cluster --config=scripts/kind.yaml
          )&
          (
          echo "Installing Helm..."
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          )&
          make install-driver &
          go mod download &
          wait

      - name: Load Images to Kind
        run: bash scripts/docker-load-to-kind.sh
      - name: Verify and Prepare Kubernetes Environment
        run: |
          set -e
          kubectl cluster-info
          kubectl version
          echo "Labeling the node ingress-ready=true, because ingress controller can't deploy without this label"
          kubectl label nodes kind-control-plane ingress-ready=true
          bash deployment/infra/nsinit.sh
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl apply -f deployment/infra/db/nats.yaml
          kubectl run nginx --image=nginx:1.27
          bash deployment/infra/db/redis.sh
          bash deployment/infra/db/tdengine.sh
          kubectl apply -f deployment/infra/db/etcd.yaml

      - name: Build And Load Containers To Kubernetes
        run: |
          set -e
          (
          bash deployment/infra/db/deploy-mysql.sh
          kubectl apply -f deployment/infra/auth/casdoor.yaml
          )&
          (
            make load-test-driver 
            bash scripts/test/mock_driver/load-test-driver.sh
          )&
          make build-all
          make copy-files
          FAST_BUILD=1 make load-to-kind -j

      - name: Prepare Lubricant and Test Resources
        run: |
          set -e
          kubectl apply -f scripts/test/mock_driver/clock/test-driver.yaml
          kubectl apply -f deployment/tester/agent.yaml
          bash deployment/infra/secret.sh
          bash scripts/push_files_to_nginx_pod.sh
          kubectl exec nginx -- bash -c 'cd /root/k8s && bash ./casdoor_init.sh'
          sudo cp scripts/crt.pem /etc/casdoor/public.pem
          openssl x509 -in scripts/crt.pem -text -noout
          kubectl apply -f deployment/infra/lubricant-grpcserver.yaml
          kubectl apply -f deployment/infra/lubricant-core-logger.yaml
          kubectl apply -f deployment/infra/lubricant-apiserver.yaml
          kubectl apply -f deployment/infra/lubricant-datastore.yaml
          kubectl apply -f deployment/infra/lubricant-reporter.yaml
          kubectl apply -f deployment/tester/svc.yaml

      - name: Start Test
        run: |
          set -e 
          sed -i 's|"http://127.0.0.1"|"http://clock-driver-service.default.svc.cluster.local"|' scripts/test/mock_driver/clock/api.json
          lubricant_pod=$(kubectl get pods -n lubricant | awk '/lubricant-apiserver/ {print $1; exit}')
          bash scripts/function/wait_pod.sh $lubricant_pod lubricant
          kubectl apply -f deployment/infra/lubricant-ingress.yaml
          sleep 10
          python3 scripts/core-test.py $lubricant_pod
